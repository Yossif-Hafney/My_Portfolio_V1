/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const ProjectsLazyRouteImport = createFileRoute('/projects')()
const DashboardLazyRouteImport = createFileRoute('/dashboard')()
const ContactLazyRouteImport = createFileRoute('/contact')()
const AboutLazyRouteImport = createFileRoute('/about')()
const IndexLazyRouteImport = createFileRoute('/')()
const ProjectsIndexLazyRouteImport = createFileRoute('/projects/')()
const ProjectsProjectidLazyRouteImport = createFileRoute(
  '/projects/$projectid',
)()

const ProjectsLazyRoute = ProjectsLazyRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/projects.lazy').then((d) => d.Route))
const DashboardLazyRoute = DashboardLazyRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))
const ContactLazyRoute = ContactLazyRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))
const AboutLazyRoute = AboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const ProjectsIndexLazyRoute = ProjectsIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsLazyRoute,
} as any).lazy(() =>
  import('./routes/projects.index.lazy').then((d) => d.Route),
)
const ProjectsProjectidLazyRoute = ProjectsProjectidLazyRouteImport.update({
  id: '/$projectid',
  path: '/$projectid',
  getParentRoute: () => ProjectsLazyRoute,
} as any).lazy(() =>
  import('./routes/projects.$projectid.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/dashboard': typeof DashboardLazyRoute
  '/projects': typeof ProjectsLazyRouteWithChildren
  '/projects/$projectid': typeof ProjectsProjectidLazyRoute
  '/projects/': typeof ProjectsIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/dashboard': typeof DashboardLazyRoute
  '/projects/$projectid': typeof ProjectsProjectidLazyRoute
  '/projects': typeof ProjectsIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/dashboard': typeof DashboardLazyRoute
  '/projects': typeof ProjectsLazyRouteWithChildren
  '/projects/$projectid': typeof ProjectsProjectidLazyRoute
  '/projects/': typeof ProjectsIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/dashboard'
    | '/projects'
    | '/projects/$projectid'
    | '/projects/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/dashboard'
    | '/projects/$projectid'
    | '/projects'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/dashboard'
    | '/projects'
    | '/projects/$projectid'
    | '/projects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  DashboardLazyRoute: typeof DashboardLazyRoute
  ProjectsLazyRoute: typeof ProjectsLazyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof ProjectsIndexLazyRouteImport
      parentRoute: typeof ProjectsLazyRoute
    }
    '/projects/$projectid': {
      id: '/projects/$projectid'
      path: '/$projectid'
      fullPath: '/projects/$projectid'
      preLoaderRoute: typeof ProjectsProjectidLazyRouteImport
      parentRoute: typeof ProjectsLazyRoute
    }
  }
}

interface ProjectsLazyRouteChildren {
  ProjectsProjectidLazyRoute: typeof ProjectsProjectidLazyRoute
  ProjectsIndexLazyRoute: typeof ProjectsIndexLazyRoute
}

const ProjectsLazyRouteChildren: ProjectsLazyRouteChildren = {
  ProjectsProjectidLazyRoute: ProjectsProjectidLazyRoute,
  ProjectsIndexLazyRoute: ProjectsIndexLazyRoute,
}

const ProjectsLazyRouteWithChildren = ProjectsLazyRoute._addFileChildren(
  ProjectsLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  DashboardLazyRoute: DashboardLazyRoute,
  ProjectsLazyRoute: ProjectsLazyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
